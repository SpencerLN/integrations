config_version: 2
interval: {{period}}
{{#if enable_request_tracer}}
request.tracer.filename: "../../logs/httpjson/http-request-trace-*.ndjson"
{{/if}}
request.method: GET
auth.oauth2:
  enabled: true
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
  user: {{username}}
  password: {{password}}
request.url: {{instance_url}}/services/data/v54.0/query?q=aurarequest
request.transforms:
  - set:
      target: url.params.q
      value: "SELECT Id,CreatedDate,LogDate,LogFile FROM EventLogFile WHERE Interval = 'Hourly' AND LogDate > [[.cursor.last_published_aurarequest]] AND (EventType = 'AuraRequest') ORDER BY LogDate ASC NULLS FIRST"
      default: "SELECT Id,CreatedDate,LogDate,LogFile FROM EventLogFile WHERE Interval = 'Hourly' AND (EventType = 'AuraRequest') AND LogDate > [[ formatDate (now (parseDuration \"{{initial_interval}}\")) ]]  ORDER BY LogDate ASC NULLS FIRST"
response.pagination:
- set:
    target: url.value
    value: '[[if (ne .last_response.body.done true)]]{{instance_url}}[[.last_response.body.nextRecordsUrl]][[end]]'
    fail_on_template_error: true
chain:
  - step:
      request.url: {{instance_url}}/services/data/v54.0/sobjects/EventLogFile/$.records[:].Id/LogFile
      request.method: GET
      replace: $.records[:].Id
cursor:
  last_published_aurarequest:
    value: '[[(formatDate ((parseDate .last_event.TIMESTAMP_DERIVED "RFC3339").Add (parseDuration "-1h")))]]'
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
processors:
- add_fields:
    target: salesforce
    fields:
      instance_url: {{instance_url}}
{{#if processors}}
{{processors}}
{{/if}}
